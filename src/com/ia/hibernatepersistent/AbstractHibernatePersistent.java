package com.ia.hibernatepersistent;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EmbeddedId;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import com.ia.util.ReflectionUtil;


public abstract class AbstractHibernatePersistent extends AbstractPersistent implements IHibernatePersistent {

	private static final long serialVersionUID = 1L;

	private static Map<Class<? extends AbstractHibernatePersistent>, Boolean> autoGeneratedId = new HashMap<Class<? extends AbstractHibernatePersistent>, Boolean>();
	
	public boolean hasAutoGeneratedId() {
		synchronized (this.getClass()) {
			if (! autoGeneratedId.containsKey(this.getClass())) {
				List<Field> possiblyIds = ReflectionUtil.getFieldsContainingAnnotation(this.getClass(), Id.class);
				if (possiblyIds .size() > 1) {
					throw new IllegalStateException("Não é possível que haja mais de um atributo com a annotation @Id");
				}
				
				List<Field> possiblyEmbbedIds = ReflectionUtil.getFieldsContainingAnnotation(this.getClass(), EmbeddedId.class);
				if (possiblyEmbbedIds .size() > 1) {
					throw new IllegalStateException("Não é possível que haja mais de um atributo com a annotation @EmbeddedId");
				}
				
				if (possiblyEmbbedIds.size() == 0 && possiblyIds.size() == 0) {
					throw new IllegalStateException("É preciso haver pelo menos um atributo com @Id ou @EmbeddedId");
				}
				
				
				Field idField;
				
				if (possiblyEmbbedIds.size() == 1) {
					autoGeneratedId.put(this.getClass(), false); //Não tem como Id's compostos serem gerados automaticamente
				} else {
					idField = possiblyIds.get(0);
					GeneratedValue annotation = idField.getAnnotation(GeneratedValue.class);
					if (annotation == null) {
						autoGeneratedId.put(this.getClass(), false);
					} else {
						autoGeneratedId.put(this.getClass(), true);
					}
				}
			}
		}
		return autoGeneratedId.get(this.getClass());
	}
	
	@Override
	public boolean isPersisted() {
		if (hasAutoGeneratedId()) {
			return super.isPersisted();
		} else {
			throw new IllegalStateException("É impossível determinar se um objeto sem Id gerado automaticamente está ou não pesistido sem fazer uma consulta.");
		}
	}
	
	@Override
	// extending the protected visibility, do not remove
	protected Map<Field, Method> getNaturalKeysGetters() {
		return super.getNaturalKeysGetters();
	}

}
